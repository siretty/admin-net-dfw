#!/bin/sh
### BEGIN INIT INFO
# Provides:           dfw
# Required-Start:     $local_fs $remote_fs
# Required-Stop:      $local_fs $remote_fs
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  Load, save and generate iptables rules.
# Description:        Load, save and generate iptables rules.
### END INIT INFO

# file where iptables rules are saved
RULES_FILE="/var/lib/dfw.rules"
LOCKFILE="/var/lock/dfw-init"

dfw_gen=/usr/bin/dfw-gen
ipts=/sbin/iptables-save
iptr=/sbin/iptables-restore

. /lib/lsb/init-functions


function default( ) {
    log_progress_msg "["
    log_progress_msg "default"

    # find all tables
    local tables=$(iptables-save | sed -n 's_^\*\(.\+\)_\1_p')
    # delete all rules in all tables and reset policies
    for table in $tables ; do
        iptables -t "$table" -F
        iptables -t "$table" -X
        iptables -t "$table" -Z
        local chains=$(iptables-save -t "$table" | sed -n 's_^:\([^ \t]\+\).*_\1_p')
        for chain in $chains ; do
            iptables -t "$table" -P "$chain" ACCEPT
        done
    done

    log_progress_msg "]"
}

function generate( ) {
    local RET="1"

    log_progress_msg "["
    log_progress_msg "generate"

    $dfw_gen > "$RULES_FILE" ; RET="$?"
    if [ "$RET" != "0" ] ; then
        log_progress_msg "fail"
    fi

    log_progress_msg "]"

    if [ "$RET" == "0" ] ; then
        return 0
    else
        return 1
    fi
}

function start( ) {
    local RET="1"

    log_progress_msg "["
    log_progress_msg "start"

    if [ -f "$RULES_FILE" ] ; then
        $iptr -c < "$RULES_FILE" ; RET="$?"
    else
        if generate ; then
            $iptr < "$RULES_FILE" ; RET="$?"
        else
            # load default rules
            default
        fi
    fi

    log_progress_msg "]"

    if [ "$RET" == "0" ] ; then
        return 0
    else
        return 1
    fi
}

function stop( ) {
    local RET="1"

    log_progress_msg "["
    log_progress_msg "stop"

    # save the current ruleset
    $ipts -c > "$RULES_FILE" ; RET="$?"

    # load default rules
    default

    log_progress_msg "]"

    if [ "$RET" == "0" ] ; then
        return 0
    else
        return 1
    fi
}


function locked( ) {
    local _lockfile="$1"
    shift
    (
      flock -x 99 || exit 1
      eval "$*"
      exit "$?"
    ) 99>$_lockfile

    local _returncode="$?"

    if [ "$_returncode" == "0" ] ; then
        return 0
    else
        return 1
    fi
}

case "$1" in
    start)
        log_daemon_msg "Starting Firewall" "dfw"
        locked $LOCKFILE  start
        log_end_msg "$?"
        ;;
    stop)
        log_daemon_msg "Stopping Firewall" "dfw"
        locked $LOCKFILE  stop
        log_end_msg "$?"
        ;;
    restart)
        log_daemon_msg "Restarting Firewall" "dfw"
        locked $LOCKFILE  "stop ; start"
        log_end_msg "$?"
        ;;
    force-reload)
        ;;
    status)
        ;;
    generate)
        log_daemon_msg "Generating Firewall Rules" "dfw"
        locked $LOCKFILE  "stop ; generate ; start"
        log_end_msg "$?"
        ;;
    *)
        echo "/etc/init.d/dfw start|stop|restart|force-reload|status|generate"
        exit 1
        ;;
esac

exit 0
